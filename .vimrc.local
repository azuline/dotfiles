set nocompatible
filetype plugin indent on
syntax on

set background=dark
set hlsearch

" Line numbers
set number
set relativenumber

set whichwrap=b,s,<,>,[,]
set nu
set autoindent

" Turn off error bells
set noerrorbells visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=

" More powerful backspacing
set backspace=indent,eol,start

" Set leader keys
nnoremap <Space> <nop>
let mapleader = " "
let maplocalleader = "\\"

" Racket
au BufReadPost *rkt.*rktl set filetype=scheme

" Indentation
au BufEnter *
    \ set autoindent |
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set fileformat=unix

au BufEnter *.txt,*.md,*.py,*.rst,*.tex,*.c,*.hs
	\ set textwidth=79

au BufEnter *.md,*.js,*.yml,*.html,*.css,*.json,*.tex,*.vue,*.ex,*.exs,*.scss,*.rb,*.ml,*.jsx
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set shiftwidth=2

au BufEnter *.md,*.py,*.rst,*.tex,*.c,*.js,*.yml,*.html,*.css,*.json,*.tex,*.vue,*.ex,*.exs,*.scss,*.rb,*.ml,*.s,*.hs,*.jsx
    \ set expandtab

au BufEnter Makefile,makefile,*.php
	\ set noexpandtab

au BufEnter *.md,*.rst,*.tex,*.txt
	\ set spell

" Trailing space highlighting
highlight BadWhitespace ctermbg=red guibg=red
au BufEnter * match BadWhitespace /\s\+$/

" Reopen file to last read line
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g'\"" | endif
endif
