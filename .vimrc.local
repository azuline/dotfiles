set nocompatible
filetype plugin indent on
syntax on

set background=dark
set hlsearch

" Line numbers
set number
set relativenumber

set whichwrap=b,s,<,>,[,]
set nu
set autoindent

" Turn off error bells
set noerrorbells visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=

" More powerful backspacing
set backspace=indent,eol,start

" Set leader keys
nnoremap <Space> <nop>
let mapleader = " "
let maplocalleader = "\\"

set expandtab
set autoindent
set tabstop=4
set softtabstop=4
set shiftwidth=4

au BufEnter *.txt,*.md,*.py,*.rst,*.tex,*.c
	\ set textwidth=79

au BufEnter *.py,*.hs
	\ set textwidth=89

au BufEnter *.md,*.js,*.yml,*.html,*.css,*.json,*.tex,*.vue,*.ex,*.exs,*.scss,*.rb,*.ml,*.jsx,*.ts,*.tsx
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set shiftwidth=2

au BufEnter Makefile,makefile,*.php
	\ set noexpandtab

au BufEnter *.md,*.rst,*.tex,*.txt
	\ set spell

" TeX files soft wrap.
au BufEnter *.tex
	\ set wrap |
	\ set linebreak |
	\ set textwidth=0 |
	\ set wrapmargin=0

" Trailing space highlighting
highlight BadWhitespace ctermbg=red guibg=red
au BufEnter * match BadWhitespace /\s\+$/

" Reopen file to last read line
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g'\"" | endif
endif

" Key mappings.
nnoremap <Leader>n :noh<CR>

nnoremap <Leader>s :split<CR><C-W>j
nnoremap <Leader>v :vsplit<CR><C-W>l

nnoremap <Leader>w :silent %w !wl-copy<CR>

nnoremap <C-H> <C-W>h
nnoremap <C-J> <C-W>j
nnoremap <C-K> <C-W>k
nnoremap <C-L> <C-W>l

nnoremap - :silent bprevious<CR>
nnoremap = :silent bnext<CR>
nnoremap <Leader><Backspace> :silent bdelete<CR>0

nnoremap <Leader>r- :resize -5<CR>
nnoremap <Leader>r= :resize =5<CR>
nnoremap <Leader>r, :vertical resize -5<CR>
nnoremap <Leader>r. :vertical resize +5<CR>

nnoremap <Leader>e- :cprevious<CR>
nnoremap <Leader>e= :cnext<CR>
nnoremap <Leader>e, :lprevious<CR>
nnoremap <Leader>e. :lnext<CR>

" https://vim.fandom.com/wiki/Smart_mapping_for_tab_completion
function! Smart_TabComplete()
  let line = getline('.')                         " current line

  let substr = strpart(line, -1, col('.'))      " from the start of the current
                                                  " line to one character right
                                                  " of the cursor
  let substr = matchstr(substr, "[^ \t]*$")       " word till cursor
  if (strlen(substr)==0)                          " nothing to match on empty string
    return "\<tab>"
  endif
  let has_period = match(substr, '\.') != -1      " position of period, if any
  let has_slash = match(substr, '\/') != -1       " position of slash, if any
  if (!has_period && !has_slash)
    return "\<C-X>\<C-P>"                         " existing text matching
  elseif ( has_slash )
    return "\<C-X>\<C-F>"                         " file matching
  else
    return "\<C-X>\<C-O>"                         " plugin matching
  endif
endfunction

inoremap <Tab> <C-r>=Smart_TabComplete()<CR>
imap <S-Tab> <C-n>

set omnifunc=syntaxcomplete#Complete
